class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
        
class Binarytree:
    def __init__(self):
        self.root=None
        
    def insert(self,data):
        self.root=self._insert_rec(self.root,data)
        
    def _insert_rec(self,root,data):
        if root is None:
            return Node(data)
        elif data<root.data:
            root.left=self._insert_rec(root.left,data)
        else:
            root.right=self._insert_rec(root.right,data)
        return root
    
    def inorder(self):
        self._inorder_rec(self.root)
        print()
        
    def _inorder_rec(self,root):
        if root is not None:
            self._inorder_rec(root.left)
            print(root.data, end=" ")
            self._inorder_rec(root.right)
            
    def preorder(self):
        self._preorder_rec(self.root)
        print()
        
    def _preorder_rec(self,root):
        if root is not None:
            print(root.data,end=" ")
            self._preorder_rec(root.left)
            self._preorder_rec(root.right)
    
    def postorder(self):
        self._postorder_rec(self.root)
        print()
        
    def _postorder_rec(self,root):
        if root is not None:
            self._postorder_rec(root.left)
            self._postorder_rec(root.right)
            print(root.data,end=" ")
            
a=Binarytree()
a.insert(8)
a.insert(7)
a.insert(12)
a.insert(15)
a.insert(2)
a.insert(5)

print("Inorder")
a.inorder()
print("Preorder")
a.preorder()
print("Postorder")
a.postorder()
